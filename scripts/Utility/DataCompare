import os
import pandas as pd
import json
from FileControl import export_csv_Part_Data

encoding = "utf-8-sig"


def trace_target_data(directory, compareCodeList, collectCodeList):
    fileList = os.listdir(directory)
    # data[compareCodeList][List][collectCodeList]
    # dict<List, List<List>>
    dictionary = dict()
    
    for fileIndex in range(len(fileList)):
        stringNum = f"{fileIndex+1}".zfill(2)
        df = pd.read_csv(f"{directory}/{fileList[fileIndex]}")
        print(df.last_valid_index())
        for index in range(df.last_valid_index()):
            key = ""
            for collect in compareCodeList:
                column = f"p{stringNum}{collect}"
                if(collect == "0107"):
                    col = df[column][index]
                    num = int(col) - fileIndex
                    key += str(num).zfill(2)
                else:
                    num = int(df[column][index])
                    key += str(num)

            inValue = []
            inValue.append("v"+f"{fileIndex+1}".zfill(2))
            for collect in collectCodeList:
                column = f"p{stringNum}{collect}"
                inValue.append(int(df[column][index]))

            outValue = None
            if(key in dictionary):
                outValue = dictionary[key]

                if((inValue in outValue) == False):
                    outValue.append(inValue)
            else:
                outValue = []
                outValue.append(inValue)
                dictionary[key] = outValue
    print(dictionary)
    
    dictionary["keys"] = dictionary.keys

    with open("./resources/Preprocess/Datas.json","w") as f:
        json.dump(dictionary, f, indent=2)



compareCodeList = ["0101", "0107", "0110", "0350"]
collectCodeList = ["0107", "1642"]

def keyListup(keyValue):
    dataList = []
    gender = keyValue[0]
    age = keyValue[1:3]
    edu = keyValue[3:4]
    job = keyValue[4:]


    dataList.append(gender)
    dataList.append(age)
    dataList.append(edu)
    dataList.append(job)
    
    if(int(job) > 999):
        for i in dataList:
            print(i)
    return dataList
    
def keyDecoder(keyValue):
    gender = keyValue[0]
    age = keyValue[1:3]
    edu = keyValue[3:4]
    job = keyValue[4:]

    if(gender == "1"):
        gender = "남자"
    else:
        gender = "여자"
    
    if(edu == "9"):
        edu = "박사"
    elif(edu == "8"):
        edu = "석사"
    elif(edu == "7"):
        edu = "학사"
    elif(edu == "6"):
        edu = "전문학사"
    elif(edu == "5"):
        edu = "고등학교"
    elif(edu == "4"):
        edu = "중학교"
    elif(edu == "3"):
        edu = "초등학교"
    elif(edu == "2"):
        edu = "무학"
    elif(edu == "1"):
        edu = "미취학"


    print(f"성별: {gender}")
    print(f"나이: {age}")
    print(f"최종학력: {edu}")
    print(f"직업 {job} - {jobDecoder(job)}")
    

def jobDecoder(jobKey):
    jobWord = "판독불가"
    if(int(jobKey) < 0):
        print(jobWord)
        return

    dir = "./resources/Preprocess/jobConvert"
    fileNames = os.listdir(dir)
    jobKey = int(jobKey)

    for f in fileNames:
        path = f"{dir}/{f}"
        df = pd.read_csv(path, encoding=encoding)  


        c = df["구코드"]
        index = df.index[c == jobKey]
        jobWord = df["구항목명"][index]
        break

    decodeData = "Error"
    try:
        decodeData = jobWord.iloc(0)[0]
    except Exception as e:
        w = str(jobKey)
        if(w[len(w)-1] == '0'):
            decodeData = jobDecoder(w[:len(w)-1])
    return decodeData

def reclassificate_trace_data(path):
    loaded = None
    with open(path, "r", encoding="utf-8") as f:
        loaded = json.load(f)

    jobAndCareer = dict()
    
    loadedKeys = loaded["keys"]
    asd = 0
    for k in loadedKeys:
        asd += 1
        if(len(loaded[k][0]) < 1):
            continue
        infoList = keyListup(k)
        if((infoList[3] in jobAndCareer.keys()) == True):
            careerList = jobAndCareer[infoList[3]][0]
            careerList.append(loaded[k])
            keyDecoder(k)
        else:
            tempList = []
            tempList.append(loaded[k])
            jobAndCareer[infoList[3]] = [tempList]
            keyDecoder(k)
        # print(loaded[k])
    
    keys = [*jobAndCareer.keys()]
    # print(keys)
    jobAndCareer["keys"] = keys
    jobAndCareer["jobs"] = len(keys)


    with open("./jobAndCareer.json","w") as f:
        json.dump(jobAndCareer, f, indent=2)

# export_csv_Part_Data("D:/project/AI-Project/resources/compareData", "D:/project/AI-Project/resources", "haveJob", "p", compareCodeList)
reclassificate_trace_data(r"D:\project\AI-Project\resources\Preprocess\Datas.json")
# trace_target_data("D:/project/AI-Project/resources/haveJob", compareCodeList, collectCodeList)


# asd = {"1":[1,2,3,4,5],"2":range(2,7),"3":range(3,8),"4":range(4,9),"5":range(5,10)}
# print(asd)
# df1 = pd.DataFrame.from_dict([asd], orient='columns')
# print(df1)